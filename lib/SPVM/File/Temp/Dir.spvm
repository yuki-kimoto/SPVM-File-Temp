# Copyright (c) 2023 Yuki Kimoto
# MIT License

class File::Temp::Dir {
  version_from File::Temp;
  
  use File::Path;
  
  allow File::Temp;
  
  # Fields
  has dirname : ro string;
  
  has DIR : string;
  
  has TMPDIR : byte;
  
  has TEMPLATE : string;
  
  has CLEANUP : byte;
  
  has process_id : int;
  
  # Class Methods
  static method new : File::Temp::Dir ($options : object[]) {
    
    my $self = new File::Temp::Dir;
    
    Fn->check_option_names($options, $self->option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("CLEANUP")) {
      $self->{CLEANUP} = (byte)$options_h->get_int("CLEANUP");
    }
    else {
      $self->{CLEANUP} = 1;
    }
    
    $self->{DIR} = $options_h->get_or_default_string("DIR", undef);
    
    $self->{TMPDIR} = (byte)$options_h->get_or_default_int("TMPDIR", 0);
    
    $self->{TEMPLATE} = $options_h->get_or_default_string("TEMPLATE", undef);
    
    my $process_id = Sys->process_id;
    
    $self->{process_id} = $process_id;
    
    my $object_id_peseud_string = Fn->sprintf("%p", [(object)$self]);
    
    my $len = length $object_id_peseud_string;
    
    my $dirname = $self->_tempdir();
    
    $self->{dirname} = $dirname;
    
    return $self;
  }
  
  # Instance Methods
  protected method option_names : string[] () {
    
    my $options_names = ["DIR", "TMPDIR", "TEMPLATE", "CLEANUP"];
    
    return $options_names;
  }
  
  method DESTROY : void () {
    
    my $dirname = $self->{dirname};
    
    if ($dirname && Sys->d($dirname)) {
      File::Path->rmtree($dirname);
    }
    
  }
  
  # Private Class Methods
  private method _tempdir : string () {
    
    my $DIR = $self->{DIR};
    
    my $TMPDIR = $self->{TMPDIR};
    
    my $TEMPLATE = $self->{TEMPLATE};
    
    my $SUFFIX = "";
    
    my $template = File::Temp->_make_template($TEMPLATE, $DIR, $TMPDIR, $SUFFIX);
    
    my $max_try_count = 1000;
    my $found_temp_dir = (string)undef;
    for (my $i = 0; $i < $max_try_count; $i++) {
      
      my $temp_dir = File::Temp->_replace_XX($template);
      
      if (Sys->e($temp_dir)) {
        # Retry
      }
      else {
        Sys::IO->mkdir($temp_dir, 0700);
        Sys::IO->chmod($temp_dir, 0700);
        $found_temp_dir = $temp_dir;
        last;
      }
    }
    
    return $found_temp_dir;
  }
  
}
