# Copyright (c) 2023 Yuki Kimoto
# MIT License

class File::Temp extends IO::File {
  version "0.026";
  
  allow File::Temp::Dir;
  
  use File::Temp::Dir;
  use Fn;
  use Sys;
  use Format;
  use Sys::IO::Constant as IOC;
  
  # Fields
  has filename : ro string;
  
  has process_id : int;
  
  # Undocumented Fields
  has DIR : string;
  
  has TMPDIR : byte;
  
  has TEMPLATE : string;
  
  has SUFFIX : string;
  
  has UNLINK : byte;
  
  # Class Methods
  static method new : File::Temp ($options : object[] = undef) {
    
    my $self = new File::Temp;
    
    $self->SUPER::init;
    
    Fn->check_option_names($options, $self->option_names);
    
    my $options_h = Hash->new($options);
    
    if ($options_h->exists("UNLINK")) {
      $self->{UNLINK} = (byte)$options_h->get_int("UNLINK");
    }
    else {
      $self->{UNLINK} = 1;
    }
    
    $self->{DIR} = $options_h->get_or_default_string("DIR", undef);
    
    $self->{TMPDIR} = (byte)$options_h->get_or_default_int("TMPDIR", 0);
    
    $self->{SUFFIX} = $options_h->get_or_default_string("SUFFIX", "");
    
    $self->{TEMPLATE} = $options_h->get_or_default_string("TEMPLATE", undef);
    
    my $process_id = Sys->process_id;
    
    $self->{process_id} = $process_id;
    
    $self->_tempfile;
    
    return $self;
  }
  
  protected method option_names : string[] () {
    
    my $options_names = ["DIR", "TMPDIR", "TEMPLATE", "SUFFIX", "UNLINK"];
    
    return $options_names;
  }
  
  static method newdir : File::Temp::Dir ($options : object[] = undef)  {
    
    my $temp_dir = File::Temp::Dir->new($options);
    
    return $temp_dir;
  }
  
  method DESTROY : void () {
    
    $self->SUPER::DESTROY;
    
    my $UNLINK = $self->{UNLINK};
    if ($UNLINK) {
      my $was_created_by_proc = $self->{process_id} == Sys->process_id;
      if ($was_created_by_proc) {
        my $file = $self->filename;
        if ($file) {
          eval {
            Sys->unlink($file);
          }
          
          if ($@) {
            warn $@;
          }
        }
      }
    }
    
  }
  
  private method _tempfile : void () {
    
    my $DIR = $self->{DIR};
    
    my $TMPDIR = $self->{TMPDIR};
    
    my $TEMPLATE = $self->{TEMPLATE};
    
    my $SUFFIX = $self->{SUFFIX};
    
    my $template_path = &_make_template_path($TEMPLATE, $DIR, $TMPDIR, $SUFFIX);
    
    my $suffixlen = length $SUFFIX;
    my $perms = 0600;
    
    my $start = length $template_path - 1 - $suffixlen;
    
    my $minx = 4;
    if (Fn->substr($template_path, $start - $minx + 1, $minx) ne Fn->repeat("X", $minx)) {
      die "The template must end with at least " . $minx . " \"X\" characters.";
    }
    
    my $parts = File::Spec->splitpath($template_path);
    my $volume = $parts->[0];
    my $directories = $parts->[1];
    my $file = $parts->[2];
    
    my $parent = File::Spec->catpath($volume, $directories, "");
    
    unless ($directories ne "") {
      $parent = File::Spec->curdir;
    }
    
    unless (Sys->e($parent)) {
      die "Parent directory ($parent) does not exist.";
    }
    
    unless (Sys->d($parent)) {
      die "Parent directory ($parent) is not a directory";
    }
    
    my $max_try_count = 1000;
    my $try_count = 0;
    while ($try_count < $max_try_count) {
      
      my $path = &_replace_XX($template_path);
      
      eval {
        my $flags = IOC->O_CREAT | IOC->O_EXCL | IOC->O_RDWR;
        my $fd = -1;
        Sys->sysopen(\$fd, $path, $flags, $perms);
        my $mode = "w+b";
        $self->fdopen($fd, $mode);
      }
      
      unless ($@) {
        $self->{filename} = $path;
        last;
      }
      
      $try_count++;
    }
    
    if ($try_count == $max_try_count) {
      die "tried to get a new temp name different to the previous value $max_try_count times.\nsomething wrong with template?? ($template_path)";
    }
    
  }
  
  private static method _make_template_path : string ($template : string, $dir : string, $tmpdir : int, $suffix : string) {
    
    my $template_path = (string)undef;
    if ($template) {
      if ($dir) {
        $template_path = File::Spec->catfile([$dir], $template);
      }
      elsif ($tmpdir) {
        $template_path = File::Spec->catfile([File::Spec->tmpdir], $template);
      }
      # Current working directory
      else {
        $template_path = $template;
      }
    }
    else {
      my $tempxxx = Fn->repeat("X", 10);
      if ($dir) {
        $template_path = File::Spec->catfile([$dir], $tempxxx);
      }
      else {
        $template_path = File::Spec->catfile([File::Spec->tmpdir], $tempxxx);
      }
    }
    
    $template_path .= $suffix;
    
    return $template_path;
  }
  
  private static method _replace_XX : string ($template : string) {
    
    my $chars = [
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_',
    ];
    
    my $template_random = (mutable string)copy $template;
    for (my $i = 0; $i < length $template_random; $i++) {
      my $template_char = $template_random->[$i];
      if ($template_char == 'X') {
        my $random_char = $chars->[(int)(Sys->rand * @$chars)];
        $template_random->[$i] = $random_char;
      }
    }
    
    return $template_random;
  }
  
}
