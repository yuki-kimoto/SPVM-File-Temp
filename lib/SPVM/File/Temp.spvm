# Copyright (c) 2023 Yuki Kimoto
# MIT License

class File::Temp {
  version "0.023";
  
  use File::Temp::Dir;
  use Fn;
  use Sys;
  use Format;
  
  # Class Methods
  static method newdir : File::Temp::Dir ()  {
    
    my $obj_temp_dir = File::Temp::Dir->new;
    
    my $object_id_peseud_string = Format->sprintf("%p", [(object)$obj_temp_dir]);
    my $seed = (int)Sys->time;
    my $len = length $object_id_peseud_string;
    for (my $i = length $object_id_peseud_string - 1; $i >= 0; $i--) {
      $seed += $object_id_peseud_string->[$i] * (10 * $i);
    }
    
    my $dirname = &_get_temp_dir(\$seed);
    
    $obj_temp_dir->{dirname} = $dirname;
    
    return $obj_temp_dir;
  }
  
  private static method _get_temp_dir : string ($seed_ref : int*) {
    
    my $template = "XXXXXXXXXX";
    
    my $temp_dir_root = File::Spec->tmpdir;
    unless ($temp_dir_root) {
      die "A template root directory can't be got";
    }
    
    my $max_try_count = 1000;
    my $found_temp_dir = (string)undef;
    for (my $i = 0; $i < $max_try_count; $i++) {
      
      my $template_random = &_replace_XX($template, $seed_ref);
      
      my $temp_dir = File::Spec->catfile([$temp_dir_root], $template_random);
      
      if (Sys->e($temp_dir)) {
        # Retry
      }
      else {
        Sys::IO->mkdir($temp_dir, 0700);
        Sys::IO->chmod($temp_dir, 0700);
        $found_temp_dir = $temp_dir;
        last;
      }
    }
    
    return $found_temp_dir;
  }
  
  private static method _replace_XX : string ($template : string, $seed_ref : int*) {
    
    my $chars = [
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_',
    ];
    
    my $template_random = (mutable string)copy $template;
    for (my $i = 0; $i < length $template_random; $i++) {
      my $template_char = $template_random->[$i];
      if ($template_char == 'X') {
        my $random_char = $chars->[(int)(Fn->rand($seed_ref) * @$chars)];
        $template_random->[$i] = $random_char;
      }
    }
    
    return $template_random;
  }
}
